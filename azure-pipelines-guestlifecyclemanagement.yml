# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# Set Variables
variables:
  - group: M365-environment-variables

# Set Name
name: $(BuildDefinitionName)_$(BuildID)_$(Date:yyyyMMdd)$(Rev:.rr)

# Don't run against master
trigger: none

# Don't run against PRs
pr: none

# Run from schedule
schedules:
- cron: "0 6 * * Mon-Fri"
  displayName: M-F 8:00 AM (UTC+2)
  branches:
    include:
    - master
    exclude:
    - refs/tags/*
  always: true

stages:
- stage: build_CI
  jobs:
  - job: build_CI
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - publish: $(System.DefaultWorkingDirectory)
      artifact: drop

- stage: deploy_PROD
  variables:
  - group: M365-PROD-environment-variables
  jobs:
  - deployment: deploy_PROD
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'microsoft-365-GULM'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: PowerShell@2
            displayName: 'Install Modules'
            inputs:
              targetType: 'inline'
              script: |
                # Install Package Provider
                Install-PackageProvider -Name NuGet -Scope CurrentUser -Force -ForceBootstrap
                # Install PnP.PowerShell
                $PnpModuleVersion = "1.10.0"
                Install-Module -Name PnP.PowerShell -Scope "CurrentUser" -RequiredVersion $PnpModuleVersion -AllowClobber -Repository 'PSGallery' -Verbose -Force
                # Install EasyGraph
                $EasyGraphModuleVersion = "1.3.0"
                Install-Module -Name EasyGraph -Scope "CurrentUser" -RequiredVersion $EasyGraphModuleVersion -AllowClobber -Repository 'PSGallery' -Verbose -Force
                # Install ExchangeOnlineManagement
                $ExoModuleVersion = "2.0.6-Preview6"
                $ExoModuleVersionPath = $ExoModuleVersion.Split('-')[0]
                Find-Module ExchangeOnlineManagement | Install-Module -Scope "CurrentUser" -RequiredVersion $ExoModuleVersion -AllowPrerelease -AllowClobber -Repository 'PSGallery' -Verbose -Force
                # Fix DLL conflicts
                try {
                  # FILES: Microsoft.Identity.Client.dll, Microsoft.IdentityModel.JsonWebTokens.dll, Microsoft.IdentityModel.Logging.dll, Microsoft.IdentityModel.Tokens.dll
                  $userDirPath = $($env:PSModulePath -split ";" -match $env:USERNAME | Select -First 1)
                  if (!$IsWindows) {
                    $userDirPath = $($env:PSModulePath -split ":" -match $env:USERNAME | Select -First 1)
                  }
                  Copy-Item -Path "$($userDirPath)/PnP.PowerShell/$PnpModuleVersion/Core/Microsoft.Identity.Client.dll" -Destination "$($userDirPath)/ExchangeOnlineManagement/$ExoModuleVersionPath/netCore/" -Force -ErrorAction Stop
                  Copy-Item -Path "$($userDirPath)/PnP.PowerShell/$PnpModuleVersion/Core/Microsoft.IdentityModel.JsonWebTokens.dll" -Destination "$($userDirPath)/ExchangeOnlineManagement/$ExoModuleVersionPath/netCore/" -Force -ErrorAction Stop
                  Copy-Item -Path "$($userDirPath)/PnP.PowerShell/$PnpModuleVersion/Core/Microsoft.IdentityModel.Logging.dll" -Destination "$($userDirPath)/ExchangeOnlineManagement/$ExoModuleVersionPath/netCore/" -Force -ErrorAction Stop
                  Copy-Item -Path "$($userDirPath)/PnP.PowerShell/$PnpModuleVersion/Core/Microsoft.IdentityModel.Tokens.dll" -Destination "$($userDirPath)/ExchangeOnlineManagement/$ExoModuleVersionPath/netCore/" -Force -ErrorAction Stop
                }
                catch {
                  Write-Host "Failed to copy module DLLs from path '$userDirPath/PnP.PowerShell/$PnpModuleVersion/Core/' to PS CurrentUser Scope path '$userDirPath/ExchangeOnlineManagement/$ExoModuleVersionPath/netCore/'"
                  Write-Host "$($Error[0].ToString())"
                }
                # Install PSWSMan
                if ( $env:AGENT_OS -and $env:AGENT_OS -ne "Windows_NT" ) { Install-Module -Name PSWSMan -Scope "CurrentUser" -Verbose -Force; Install-WSMan -Verbose }
              errorActionPreference: 'silentlyContinue'
              pwsh: true
          - task: DownloadSecureFile@1 # Download a secure file to the agent machine
            displayName: 'Download Certificate'
            name: mycert # The name with which to reference the secure file's path on the agent, like $(mySecureFile.secureFilePath)
            inputs:
              secureFile: "[ORGANIZATION PREFIX]-[CLIENTID]-[ENVIRONMENT].pfx" # The file name or GUID of the secure file. ex. "MC-00000000-0000-0000-0000-000000000000-PROD.pfx"
            condition: ne(variables['DSTCREDS_PFXPASS'], '')
            env:
              DSTCREDS_PFXPASS: $(DSTCREDS_PFXPASS) # Maps the secret variable $(DSTCREDS_PFXPASS) from 'M365-PROD-environment-variables' group
          - download: current
            displayName: 'Download Artifact'
            artifact: drop
          - task: PowerShell@2
            displayName: 'Run Deploy Script'
            inputs:
              filePath: '$(Pipeline.Workspace)/drop/Scripts/M365/3. Governance/_GuestUserLifeCycleManagement/Apply-GuestUserLifeCycle.ps1'
              errorActionPreference: silentlyContinue
              pwsh: true
              workingDirectory: '$(Pipeline.Workspace)/drop/Scripts/M365/3. Governance/_GuestUserLifeCycleManagement'
            env:
              DSTCREDS_PASSWORD: $(DSTCREDS_PASSWORD) # Maps the secret variable $(DSTCREDS_PASSWORD) from 'M365-PROD-environment-variables' group
              DSTCREDS_THUMB: $(DSTCREDS_THUMB) # Maps the secret variable $(DSTCREDS_THUMB) from 'M365-PROD-environment-variables' group
              DSTCREDS_SECRET: $(DSTCREDS_SECRET) # Maps the secret variable $(DSTCREDS_SECRET) from 'M365-PROD-environment-variables' group
              DSTCREDS_PFXFILE: $(mycert.secureFilePath) # Maps the secure file path from DownloadSecureFile task
              DSTCREDS_PFXPASS: $(DSTCREDS_PFXPASS) # Maps the secret variable $(DSTCREDS_PFXPASS) from 'M365-PROD-environment-variables' group
